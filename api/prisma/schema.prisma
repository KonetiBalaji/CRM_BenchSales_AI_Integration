// Bench Sales CRM Database Schema
// Created by Balaji Koneti
// This file defines the database models and relationships

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Company model - represents staffing companies
model Company {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  users       User[]
  consultants Consultant[]
}

// User model - represents company employees
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      String   @default("Recruiter")
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
}

// Consultant model - represents available consultants
model Consultant {
  id              String   @id @default(uuid())
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       String
  name            String
  email           String?  @unique
  phone           String?
  primarySkill    String?
  skills          String[]
  visaStatus      String?
  location        String?
  availabilityDate DateTime?
  rateMin         Int?
  remoteOk        Boolean  @default(true)
  // AI-enhanced fields
  skillEmbeddings Float[]  // Vector embeddings for semantic search
  successRate     Float?   @default(0.0) // AI-calculated success rate
  aiScore         Float?   @default(0.0) // Overall AI performance score
  lastMatched     DateTime? // Last successful match
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  submissions     Submission[]
  matches         Match[]
}

// Job Requirements model - represents client job requirements
model Requirement {
  id              String   @id @default(uuid())
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       String
  title           String
  description     String
  skills          String[]
  experience      Int?     // Years of experience required
  location        String?
  rateMax         Int?
  remoteOk        Boolean  @default(false)
  urgency         String   @default("Medium") // Low, Medium, High
  status          String   @default("Open") // Open, Filled, Closed
  // AI-enhanced fields
  skillEmbeddings Float[]  // Vector embeddings for matching
  aiComplexity    Float?   // AI-calculated complexity score
  matchCount      Int      @default(0) // Number of successful matches
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  submissions     Submission[]
  matches         Match[]
}

// Submissions model - tracks consultant submissions to requirements
model Submission {
  id              String   @id @default(uuid())
  consultant      Consultant @relation(fields: [consultantId], references: [id])
  consultantId    String
  requirement     Requirement @relation(fields: [requirementId], references: [id])
  requirementId   String
  status          String   @default("Submitted") // Submitted, Interviewed, Selected, Rejected
  submittedAt     DateTime @default(now())
  // AI-enhanced fields
  matchScore      Float?   // AI-calculated match score
  successProbability Float? // AI-predicted success probability
  notes           String?
  
  @@unique([consultantId, requirementId])
}

// Match model - tracks successful consultant-requirement matches
model Match {
  id              String   @id @default(uuid())
  consultant      Consultant @relation(fields: [consultantId], references: [id])
  consultantId    String
  requirement     Requirement @relation(fields: [requirementId], references: [id])
  requirementId   String
  matchedAt       DateTime @default(now())
  // AI-enhanced fields
  finalScore      Float    // Final AI match score
  successFactors  String[] // Key factors that led to success
  notes           String?
}

// AI Analytics model - stores AI insights and predictions
model AIAnalytics {
  id              String   @id @default(uuid())
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       String
  type            String   // "match_prediction", "rate_analysis", "success_forecast"
  data            Json     // Flexible JSON data for different analytics
  confidence      Float    // AI confidence score (0-1)
  createdAt       DateTime @default(now())
}

// AI Chat Sessions model - for natural language queries
model AIChatSession {
  id              String   @id @default(uuid())
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       String
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  messages        Json     // Array of chat messages
  context         Json?    // AI context and memory
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
